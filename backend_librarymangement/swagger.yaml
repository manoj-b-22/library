openapi: 3.0.0
info:
  version: 1.0.0
  title: Online Library API
  description: A simple API to do CRUD on users, books, orders resources in online library

servers:
  - url: http://localhost:5000/

tags:
  - name: User
    description: API to manage the users.
  - name: Book
    description: API to manage the books.
  - name: Order
    description: API to manage the orders.
  - name: Login
    description: API to manage the login.
  - name: Search
    description: API to manage search books and orders.

paths:
  /users:
    get:
      summary: Lists all the users
      tags: [User]
      responses:
        "200":
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: Creates an user Object .
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Created Successfully.
  /users/{userID}:
    get:
      summary: Returns an user Object by ID.
      tags: [User]
      parameters:
        - name: userID
          in: path
          required: true
          description: Autogenerated User ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags: [User]
      summary: Updated user
      description: updates the user object.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: ID of the user object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid user ID supplied
        "404":
          description: User not found
    delete:
      tags: [User]
      summary: Delete user
      description: deletes an user object
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid user ID supplied
        "404":
          description: User not found
  /books:
    get:
      summary: Lists all the Books
      tags: [Book]
      responses:
        "200":
          description: The list of books.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    post:
      summary: Creates a Book Object.
      tags: [Book]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Created Successfully.
  /books/{bookID}:
    get:
      summary: Returns a book Object by ID.
      tags: [Book]
      parameters:
        - name: bookID
          in: path
          required: true
          description: Autogenerated User ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    patch:
      tags: [Book]
      summary: Updated Book
      description: updates the book object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      produces:
        - "application/json"
      parameters:
        - name: bookID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid book ID supplied
        "404":
          description: book not found
    delete:
      tags: [Book]
      summary: Delete book
      description: deletes the book object
      produces:
        - "application/json"
      parameters:
        - name: bookID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid book ID supplied
        "404":
          description: book not found
  /orders:
    get:
      summary: Lists all the Orders
      tags: [Order]
      responses:
        "200":
          description: The list of orders.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    post:
      summary: Creates an Order Object.
      tags: [Order]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Created Successfully.
  /orders/{orderID}:
    get:
      summary: Returns an order Object by ID.
      tags: [Order]
      parameters:
        - name: orderID
          in: path
          required: true
          description: Autogenerated order ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    patch:
      tags: [Order]
      summary: Updated Order
      description: updates the order object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      produces:
        - "application/json"
      parameters:
        - name: orderID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid order ID supplied
        "404":
          description: order not found
    delete:
      tags: [Order]
      summary: Delete Order
      description: deletes the order object
      produces:
        - "application/json"
      parameters:
        - name: orderID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid order ID supplied
        "404":
          description: order not found
  /login:
    post:
      summary: Creates a Login Object.
      tags: [Login]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "201":
          description: Logged In Successfully.
  /search/books:
    get:
      tags: [Search]
      parameters:
        - in: header
          name: x-access-token
          schema: 
            type: string
          required: true 
        - in: query
          name: title
          schema:
            type: string
          description: The title of the book.
        - in: query
          name: author
          schema:
            type: string
          description: The author of the book.
        - in: query
          name: ISBN
          schema:
            type: string
          description: The ISBN of the book.
        - in: query
          name: publication
          schema:
            type: string
          description: The publication of the book.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Search"
  /search/orders:
    get:
      tags: [Search]
      parameters:
        - in: header
          name: x-access-token
          schema: 
            type: string
          required: true 
        - in: query
          name: username
          schema:
            type: string
          description: The username who ordered the book.
        - in: query
          name: return
          schema:
            type: boolean
          description: Whether the book is returned or not.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Search"

components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - isAdmin
      properties:
        id:
          type: integer
          description: The auto-generated id of the student.
        username:
          type: string
          description: The name of the student.
        password:
          type: string
          description: The roll number of the student
        isAdmin:
          type: boolean
          description: Checks whether the user is Admin or not 
      example:
        username: bada
        password: b123
        isAdmin: false

    Book:
      type: object
      required:
        - title
        - author
        - ISBN
        - publication
        - link
        - addedBy
      properties:
        id:
          type: integer
          description: The auto-generated id of the book.
        title:
          type: string
          description: The title of the book.
        author:
          type: string
          description: The author of the book.
        ISBN:
          type: string
          description: The ISBN number of the book.
        publication:
          type: string
          description: The year of publication of the book.
        link:
          type: string
          description: The link of the image of the book.
        addedBy:
          type: string
          description: The admin name who added the book.
      example:
        title: crazy kids
        author: bada
        ISBN: 978-3-16-148410-0
        publication: 2001
        link: https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/lrg/9781/4088/9781408894996.jpg
        addedBy: manoj

    Order:
      type: object
      required:
        - date
        - username
        - return
        - bookID
      properties:
        id:
          type: integer
          description: The auto-generated id of the respective order.
        username:
          type: string
          decription: the name of user who ordered the book.
        date:
          type: string
          description: the time a book ordered by user.
        return:
          type: boolean
          description: whether returned in time or not.
        bookId:
          type: string
          description: the ID of the book ordered.
      example:
        date: Wed, 14 Jun 2017 07:00:00 GMT
        username: bada
        return: true
        bookId: 624703f88534ab047cc54ecd

    Login:
      type: object
      required:
        - username
        - password 
      properties:
        username:
          type: string
          decription: the name of user who logged into website.
        password:
          type: string
          decription: the password of user who logged into website.
      example:
        username: chota
        password: test123

    Search:
      type: object
